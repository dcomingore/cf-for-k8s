#@ load("@ytt:data", "data")
#@ load("@ytt:library", "library")
#@ load("@ytt:template", "template")
#@ load("@ytt:yaml", "yaml")
#@ load("@ytt:struct", "struct")
#@ load("@ytt:assert", "assert")

#@ load("/minio/minio.star", "minio_enabled")
#@ load("/namespaces.star", "system_namespace", "workloads_namespace")

#! ingress_values serialized data.values into YAML string and merges
#! function values into it
#@ def ingress_values():
#@  values = struct.decode(data.values)
#@  values["system_namespace"] = system_namespace()
#@  values["workloads_namespace"] = workloads_namespace()
#@  values["minio_enabled"] = minio_enabled()
#@  return {
#@    "values": yaml.encode(values)
#@  }
#@ end

#@ if data.values.networking.ingress_solution_provider not in ["istio", "contour"]:
#@  assert.fail("networking.ingress_solution_provider can only be 'istio' or 'contour'. Please choose one.")
#@ end
#@
#@ ingress_library = library.get(
#@  data.values.networking.ingress_solution_provider
#@ ).with_data_values(ingress_values())
#@

#! Load the library templates into this file
--- #@ template.replace(ingress_library.eval())

#! Load overlays and apply them
#@ overlays = ingress_library.export("all_overlays")
#@ for overlay in overlays:
--- #@ template.replace(overlay())
#@ end



